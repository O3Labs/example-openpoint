// Code generated by go-bindata.
// sources:
// config/local.json
// config/production.json
// config/staging.json
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configLocalJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x90\xcd\x6a\xe3\x30\x14\x85\xd7\xf2\x53\x98\xbb\x9e\xd8\x96\x1d\x61\x8f\x18\x86\x61\x4a\xa1\x8b\xd0\x42\x4b\x1e\xe0\x5a\x91\x6b\x51\xd9\x57\x48\x32\x81\x86\xbc\x7b\x91\x53\x37\x3b\xfd\x7c\xdf\x3d\x3a\xba\x64\x0c\x66\x9c\x34\xc8\x1c\x2c\x29\xb4\xf0\x2b\x63\xe0\x89\x22\xe4\x12\xd6\x4d\x8f\x41\x1f\xbd\x4d\xc4\x18\xa3\x93\x65\xb9\x82\x23\x85\x28\xbb\xaa\xab\x56\xc8\x2d\xbd\x35\xea\xff\x1d\xbd\x9d\x92\x8f\x20\xf3\x44\xad\x63\x75\xa0\xc5\xab\x14\x76\xc9\x18\x83\xc1\xd8\x6d\xcd\xc0\x61\x1c\x93\x58\xa2\x33\x65\xba\x09\x25\x64\x8c\x5d\x33\x76\x4d\xae\x9e\xd0\xd8\x1f\xd1\xd3\x94\xd8\x97\x26\x3f\x60\x1f\xf2\x3f\xe8\x4c\x30\xf1\x1f\x35\xc5\xac\xe3\x99\xfc\xc7\x5f\xf8\xf6\xf0\x1c\x36\xcb\xeb\x77\x43\x73\xf2\x96\xb0\x3b\xeb\x10\x77\xf5\x46\xcd\x9a\x40\xae\x90\xa2\xcf\xc7\xf9\xe4\xc8\xcc\x11\xe4\x56\x98\xd7\x6d\x51\x15\x55\xc1\xa5\xa8\xaa\xb5\x30\x83\x30\xa1\x8f\x0f\x34\x47\x8f\x2a\xbe\x29\x6f\x5c\x7c\xc2\x30\x82\x84\x56\xf4\x2d\xd6\x5c\x34\x7d\x3b\xec\x7b\x8d\x5c\xd4\x28\xb4\x1a\xf8\xef\xa1\xeb\x84\x50\x9c\xeb\x76\x2f\x78\x7b\x9b\x33\x2c\xd6\x3e\xd3\x49\x1f\x5f\x0f\xf7\xc0\xfb\x0f\x37\x55\xd3\x34\xe9\x99\xd9\xf5\x2b\x00\x00\xff\xff\x63\xd9\x99\x7f\xac\x01\x00\x00")

func configLocalJsonBytes() ([]byte, error) {
	return bindataRead(
		_configLocalJson,
		"config/local.json",
	)
}

func configLocalJson() (*asset, error) {
	bytes, err := configLocalJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/local.json", size: 428, mode: os.FileMode(420), modTime: time.Unix(1519642996, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configProductionJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\xdf\xaa\xd4\x30\x10\xc6\xaf\xd3\xa7\x28\x73\xed\xb6\x3d\xdb\x96\xc6\x20\x22\x8a\xe0\xc5\x41\x41\x39\x0f\x90\xa6\xd3\xd3\x60\x9a\x09\xc9\x94\xa2\xcb\xbe\xbb\xa4\xeb\x9e\xbd\xcb\x9f\xdf\x6f\xbe\xf9\x2e\x85\x00\xaf\x57\x04\x55\x42\x88\x34\x6d\x86\x2d\x79\x78\x57\x08\x88\x44\x0c\xa5\x82\xe3\x32\xea\x84\x2f\xd1\x65\x6c\x61\x0e\x49\xd5\x75\x70\xfa\x4f\x45\x6d\xe5\x91\x77\x8a\xbf\x0f\x2c\x6c\xa3\xb3\xe6\xf3\x03\xbe\xbd\x52\x64\x50\xa5\x6c\x64\x73\x0c\xc6\x44\x5b\x34\x39\xf3\x52\x08\x01\xb3\x75\xf7\xb3\x80\xa0\x79\xc9\x62\xad\x83\xad\xf3\x4f\xaa\xa1\x10\xe2\x5a\x88\x6b\x76\x71\xd5\xd6\xbd\x89\x91\xd6\xcc\xfe\x68\xcb\x67\x3d\xa6\xf2\xc3\x82\xce\xd1\xa7\xc7\x4e\x1f\xe1\xbf\xa6\xf7\x74\x97\x22\xbe\xe6\x86\xaa\x84\x2d\x9d\x76\x4c\x7c\x3a\xdf\x29\x8f\x04\xea\x80\x0c\xfd\xfd\xea\xa7\x40\xd6\x33\xa8\xa3\xb1\xaa\x6b\xc6\xc4\x1e\xf9\xa4\x83\xad\x3c\x92\xdf\xb5\x73\xc8\x95\xa1\x35\xb7\x14\x90\x56\x1d\xf9\x0b\x79\x8e\xda\xf0\x2f\x13\x6d\xe0\x6f\x3a\x2d\xa0\x60\x1c\xcc\xd3\x2c\xfb\x46\x37\xe7\x1e\xdb\xae\xeb\x7b\x1c\xf0\xbd\x34\xbd\x94\x66\x90\x5d\x2b\xfb\x66\x18\xe6\xf1\xe9\x36\x67\xde\x9c\xfb\x4e\x13\xbe\xfc\x7c\x7e\x84\x27\xc4\xa9\xcb\xb1\x15\xc5\x57\x75\x6e\xda\xf6\x58\xbb\xb8\xfe\x0b\x00\x00\xff\xff\x57\x3f\x82\x13\xc2\x01\x00\x00")

func configProductionJsonBytes() ([]byte, error) {
	return bindataRead(
		_configProductionJson,
		"config/production.json",
	)
}

func configProductionJson() (*asset, error) {
	bytes, err := configProductionJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/production.json", size: 450, mode: os.FileMode(420), modTime: time.Unix(1519611139, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configStagingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\xdd\x8a\xdb\x30\x10\x85\xaf\xe5\xa7\x30\x73\xdd\xd8\x71\x1c\x63\x57\x94\x52\x5a\x0a\xbd\x58\x5a\x68\xd9\x07\x18\x2b\x63\x47\x54\xd6\x08\x69\x8c\x69\x97\xbc\x7b\x91\xb7\xd9\xdc\xe9\xe7\xfb\xe6\xcc\x79\x29\x14\x78\x5c\x08\x74\x09\x49\x70\xb6\x7e\x86\x77\x85\x82\xc8\x2c\x50\x6a\xd8\x2f\x23\x26\x7a\x8e\x2e\x33\x57\x91\x90\x74\x5d\x07\x87\x7f\x2a\x6e\x2b\x4f\xb2\x71\xfc\xbd\x63\x61\x1d\x9d\x35\x9f\x1f\xf0\xeb\x2b\x47\x01\x5d\x0e\xc7\xe1\xb8\x0f\xa6\xc4\x6b\x34\x39\xf0\xa5\x50\x0a\x26\xeb\xee\x67\x05\x01\xe5\x9a\xc5\x1a\x83\xad\xf3\x4f\xaa\xa1\x50\xea\x56\xa8\x5b\x76\x69\x41\xeb\xde\xc4\xc8\x4b\x66\x7f\xb4\xe5\x13\x8e\xa9\xfc\x80\xc1\x26\x2b\x9f\x1e\x4b\x7d\x84\xff\x1e\x6e\xe9\x6e\x45\x9a\x2d\xfb\xec\xad\xe9\xb0\x51\x92\xc3\xe9\x4e\x79\x62\xd0\x3b\x64\xf8\xef\x57\x7f\x09\x6c\xbd\x80\xde\x2b\xeb\xba\x16\x4a\xe2\x49\x0e\x18\x6c\xe5\x89\xfd\x86\xce\x91\x54\x86\x97\x5c\x53\x41\x5a\x30\xca\x17\xf6\x12\xd1\xc8\x2f\x13\x6d\x90\x6f\x98\xae\xa0\xa1\xef\xc6\x1e\x4f\x4d\xd7\x8e\xfd\x74\x1e\x09\x9b\xee\x84\x1d\x99\xa9\x79\x3f\x0d\x43\xd7\x99\xa6\xa1\xfe\xdc\x35\xfd\xeb\x9c\x69\x75\xee\x3b\x5f\xe8\xf9\xe7\xd3\x23\x3c\x11\x5d\xce\x39\xb6\xe2\x38\xeb\xd3\xb1\x6d\xf7\xb5\x8b\xdb\xbf\x00\x00\x00\xff\xff\x19\x6c\x11\x08\xc0\x01\x00\x00")

func configStagingJsonBytes() ([]byte, error) {
	return bindataRead(
		_configStagingJson,
		"config/staging.json",
	)
}

func configStagingJson() (*asset, error) {
	bytes, err := configStagingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/staging.json", size: 448, mode: os.FileMode(420), modTime: time.Unix(1519629372, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/local.json": configLocalJson,
	"config/production.json": configProductionJson,
	"config/staging.json": configStagingJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"local.json": &bintree{configLocalJson, map[string]*bintree{}},
		"production.json": &bintree{configProductionJson, map[string]*bintree{}},
		"staging.json": &bintree{configStagingJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

